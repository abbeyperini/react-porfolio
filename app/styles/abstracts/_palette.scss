////
/// Color Palette
/// @group abstracts
////

// The main palette for the theme
$palette: (
    "gcu-blue": #003da6,
    "pale-blue": #a3cfff,
    "purple": #3e1e5f,
    "pink": #eb386b,
    "teal-green": #0cbaba,
    "olive-green": #b9be2f,
    "yellow": #fbe54e,
    "dark-grey": #444,
    "light-grey": #ddd
);

// Simple list of opacities
$opacities: (
    ten: 0.1,
    twenty: 0.2,
    thirty: 0.3,
    forty: 0.4,
    fifty: 0.5,
    sixty: 0.6,
    seventy: 0.7,
    eighty: 0.8,
    ninety: 0.9
);

// These represent the count and intensity of tints and shades to be generated
// based on the palette
$tint-steps: (20%, 36%);
$shade-steps: (20%, 36%);

// Loop through each color in the palette, and generate tints and shades
// based on the original palette
$palette-opacities: ();
$tints: ();
$tint-opacities: ();
$shades: ();
$shade-opacities: ();
@each $name, $color in $palette {
    @each $friendly, $value in $opacities {
        $palette-opacities: map-merge(
            $palette-opacities,
            (
                #{$name}--#{$friendly}: rgba($color, $value)
            )
        );
    }
    @for $i from 1 through length($tint-steps) {
        $tints: map-merge(
            $tints,
            (
                #{$name}-tint-#{$i}: mix(white, $color, nth($tint-steps, $i))
            )
        );
        @each $friendly, $value in $opacities {
            $tint-opacities: map-merge(
                $tint-opacities,
                (
                    #{$name}--#{$friendly}: rgba(mix(white, $color, nth($tint-steps, $i)), $value)
                )
            );
        }
    }
    @for $i from 1 through length($shade-steps) {
        $shades: map-merge(
            $shades,
            (
                #{$name}-shade-#{$i}: mix(black, $color, nth($shade-steps, $i))
            )
        );
        @each $friendly, $value in $opacities {
            $shade-opacities: map-merge(
                $shade-opacities,
                (
                    #{$name}-shade-#{$i}--#{$friendly}: rgba(mix(black, $color, nth($shade-steps, $i)), $value)
                )
            );
        }
    }
}

// Adjust the tints
$tints: map-merge(
    $tints,
    (
        light-grey-tint-1: #f6f6f6,
        light-grey-tint-2: #fff,
        dark-grey-shade-2: #2b2b2b
    )
);

// Add custom white and black to the palette *after* tinting and shading
$palette: map-merge(
    $palette,
    (
        white: #fff,
        black: #2b2b2b,
        transparent: rgba(0, 0, 0, 0)
    )
);
